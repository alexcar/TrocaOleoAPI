// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220925170517_InitialData")]
    partial class InitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CompanyInfrastructure", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InfrastructuresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompaniesId", "InfrastructuresId");

                    b.HasIndex("InfrastructuresId");

                    b.ToTable("InfrastructureCompany", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ddd")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<Guid>("UserUpdate")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5eb9331-ae52-4c97-9f1a-eeef506f05df"),
                            Active = true,
                            Address = "Av. Central, 100",
                            Cnpj = "05.185.409/0001-43",
                            CommercialName = "Zé Gracha",
                            Contact = "José da Silva",
                            Country = "Brasil",
                            County = "Santa isabel",
                            CreationDate = new DateTime(2022, 9, 25, 14, 5, 16, 831, DateTimeKind.Local).AddTicks(6834),
                            Ddd = "011",
                            Email = "contato@zegracha.com",
                            Name = "Zé Gracha Ltda",
                            Neighborhood = "Centro",
                            Phone = "984561122",
                            UF = "SP",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a"),
                            WebSite = "zegracha.com",
                            ZipCode = "07500000"
                        });
                });

            modelBuilder.Entity("Entities.Models.Infrastructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("UserUpdate")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Infrastructure", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("884bc531-f0e6-463b-aa9f-f0ac9d8b521a"),
                            Active = true,
                            CreationDate = new DateTime(2022, 9, 25, 14, 5, 16, 831, DateTimeKind.Local).AddTicks(8452),
                            Name = "Ar condicionado",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("3b90f7bc-2bb1-455f-a46e-2fdffbdd0167"),
                            Active = true,
                            CreationDate = new DateTime(2022, 9, 25, 14, 5, 16, 831, DateTimeKind.Local).AddTicks(8457),
                            Name = "Sala de espera",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("05dd35ae-c60d-4349-98b1-ba990fed57d5"),
                            Active = true,
                            CreationDate = new DateTime(2022, 9, 25, 14, 5, 16, 831, DateTimeKind.Local).AddTicks(8460),
                            Name = "Área para fumante",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        });
                });

            modelBuilder.Entity("CompanyInfrastructure", b =>
                {
                    b.HasOne("Entities.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Infrastructure", null)
                        .WithMany()
                        .HasForeignKey("InfrastructuresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
