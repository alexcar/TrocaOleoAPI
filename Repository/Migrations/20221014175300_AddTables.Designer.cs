// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20221014175300_AddTables")]
    partial class AddTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CompanyInfrastructure", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InfrastructuresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompaniesId", "InfrastructuresId");

                    b.HasIndex("InfrastructuresId");

                    b.ToTable("InfrastructureCompany", (string)null);
                });

            modelBuilder.Entity("CompanyService", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompaniesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("CompanyService");
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ddd")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<Guid>("UserUpdate")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5eb9331-ae52-4c97-9f1a-eeef506f05df"),
                            Active = true,
                            Address = "Av. Central, 100",
                            Cnpj = "05.185.409/0001-43",
                            CommercialName = "Zé Gracha",
                            Contact = "José da Silva",
                            Country = "Brasil",
                            County = "Santa isabel",
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 737, DateTimeKind.Local).AddTicks(5796),
                            Ddd = "011",
                            Email = "contato@zegracha.com",
                            Name = "Zé Gracha Ltda",
                            Neighborhood = "Centro",
                            Phone = "984561122",
                            UF = "SP",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a"),
                            WebSite = "zegracha.com",
                            ZipCode = "07500000"
                        });
                });

            modelBuilder.Entity("Entities.Models.CreditCardBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserUpdate")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CreditCardBrand", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c32b3780-5c90-4990-896f-502a478f9a22"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 737, DateTimeKind.Local).AddTicks(7173),
                            Name = "Mastercard",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("9f780c05-7252-485d-8cf6-9279272e1086"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 737, DateTimeKind.Local).AddTicks(7182),
                            Name = "Visa",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        });
                });

            modelBuilder.Entity("Entities.Models.Infrastructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("UserUpdate")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Infrastructure", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("884bc531-f0e6-463b-aa9f-f0ac9d8b521a"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(902),
                            Name = "Ar condicionado",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("3b90f7bc-2bb1-455f-a46e-2fdffbdd0167"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(914),
                            Name = "Sala de espera",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("05dd35ae-c60d-4349-98b1-ba990fed57d5"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(920),
                            Name = "Área para fumante",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ProductManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserUpdate")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductManufacturerId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fb540e6-7b18-4904-bef6-82323c423dc3"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(6601),
                            Description = "Óleo Lubrax 20w50",
                            Name = "Óleo Motor 20w50 Essencial SL",
                            Price = 62.22m,
                            ProductManufacturerId = new Guid("45a0fbef-bd12-4fc5-ae7a-4f99a8e8f34d"),
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("47ee3977-ddb6-4d10-aa33-2f5d08d521eb"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(6615),
                            Description = "Óleo Lubrax 20w50",
                            Name = "Óleo Lubrax 20w50 SL 3lt",
                            Price = 149.85m,
                            ProductManufacturerId = new Guid("45a0fbef-bd12-4fc5-ae7a-4f99a8e8f34d"),
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("a892244e-1ec6-4349-b11c-94c85655a820"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(6623),
                            Description = "Óleo Lubrax 20w50",
                            Name = "Óleo Do Motor Lubrax Essencial",
                            Price = 39.99m,
                            ProductManufacturerId = new Guid("45a0fbef-bd12-4fc5-ae7a-4f99a8e8f34d"),
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        });
                });

            modelBuilder.Entity("Entities.Models.ProductManufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserUpdate")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ProductManufacturer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("45a0fbef-bd12-4fc5-ae7a-4f99a8e8f34d"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(2406),
                            Name = "Lubrax Petrobras",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("d6f0bb03-97c9-41a2-a20c-19e8fc788d72"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(2414),
                            Name = "Mobil Industrial",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("07ca7d2c-08f0-4848-b760-03aac0ad29f4"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(2418),
                            Name = "Shell",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        },
                        new
                        {
                            Id = new Guid("f7becb0d-770c-4fc2-a6e2-c7eb75069af4"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(2422),
                            Name = "Ipiranga",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        });
                });

            modelBuilder.Entity("Entities.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserUpdate")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Service", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e3d9cbd-470d-493b-9fed-fafed765b47a"),
                            Active = true,
                            CreationDate = new DateTime(2022, 10, 14, 14, 52, 59, 738, DateTimeKind.Local).AddTicks(8071),
                            Name = "Troca de Óleo",
                            UserUpdate = new Guid("5cf7137c-ae20-497d-831d-8df824697c8a")
                        });
                });

            modelBuilder.Entity("ProductService", b =>
                {
                    b.Property<Guid>("ProductiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductiesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ProductService");
                });

            modelBuilder.Entity("CompanyInfrastructure", b =>
                {
                    b.HasOne("Entities.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Infrastructure", null)
                        .WithMany()
                        .HasForeignKey("InfrastructuresId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyService", b =>
                {
                    b.HasOne("Entities.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.ProductManufacturer", "ProductManufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ProductManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductManufacturer");
                });

            modelBuilder.Entity("ProductService", b =>
                {
                    b.HasOne("Entities.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductiesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.ProductManufacturer", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
